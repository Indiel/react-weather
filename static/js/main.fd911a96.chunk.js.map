{"version":3,"sources":["components/DayWeather/DayWeather.js","components/DayCard/DayCard.js","components/FiveDayWeather/FiveDayWeather.js","App.js","serviceWorker.js","index.js"],"names":["dayWeekAbbreviated","monthNames","DayWeather","convertDate","date","Date","props","day","dayWeek","getDay","getDate","month","getMonth","className","this","city","temp","src","icon","alt","summary","Math","round","apparent","wind","humidity","React","Component","DayCard","dt","main","weather","FiveDayWeather","formatDayCards","days","map","index","key","weatherApiLinkDay","weatherApiLinkFiveDay","App","state","undefined","componentDidMount","a","fetch","responseDay","json","dataDay","console","log","setState","name","description","feels_like","speed","responseFiveDay","dataFiveDay","daytimeTemperatures","list","filter","reading","dt_txt","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd911a96.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DayWeather.css';\r\n\r\nconst dayWeekAbbreviated = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\r\nconst monthNames = ['января', 'февраля', 'марта',\r\n    'апреля', 'мая', 'июня',\r\n    'июля', 'августа', 'сентября',\r\n    'октября', 'ноября', 'декабря'];\r\n\r\nclass DayWeather extends React.Component {\r\n    convertDate = () => {\r\n        const date = new Date(this.props.day * 1000);\r\n        const dayWeek = dayWeekAbbreviated[date.getDay()];\r\n        const day = date.getDate();\r\n        const month = monthNames[date.getMonth()];\r\n\r\n        return `${dayWeek} ${day} ${month} `;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className='day-weather'>\r\n                <div className='wrapper'>\r\n                    <h2 className='day-weather__city'>{this.props.city}</h2>\r\n                    <p className='day-weather__date'>{this.convertDate()}</p>\r\n                    <div className='day-weather__info'>\r\n                        <div className='day-weather__temperature'>\r\n                            <p className='day-weather__value'>\r\n                                {this.props.temp}\r\n                                <sup className='day-weather__degree'>°</sup>\r\n                            </p>\r\n                            <img \r\n                                className='day-weather__icon' \r\n                                src={`http://openweathermap.org/img/wn/${this.props.icon}@2x.png`} \r\n                                alt='Weather icon' \r\n                            />\r\n                        </div>\r\n                        <div className='day-weather__description'>\r\n                            <p className='day-weather__summary'>{this.props.summary}</p>\r\n                            <p className='day-weather__apparent'>Ощущается как: {Math.round(this.props.apparent)}°</p>\r\n                            <p className='day-weather__wind'>Ветер: {this.props.wind} m/s</p>\r\n                            <p className='day-weather__humidity'>Влажность: {this.props.humidity} %</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayWeather;\r\n","import React from 'react';\r\nimport './DayCard.css';\r\n\r\nconst dayWeek = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\r\n\r\nclass DayCard extends React.Component {\r\n    convertDate = () => {\r\n        const date = new Date(this.props.day.dt * 1000);\r\n\r\n        return `${dayWeek[date.getDay()]}`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <li className='five-day__item'>\r\n                <p className='five-day__day'>{this.convertDate()}</p>\r\n                <p className='five-day__temperature'>{Math.round(this.props.day.main.temp)}°</p>\r\n                <img \r\n                    className='five-day__icon'\r\n                    src={`http://openweathermap.org/img/wn/${this.props.day.weather[0].icon}@2x.png`} \r\n                    alt='' \r\n                />\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayCard;\r\n","import React from 'react';\r\nimport './FiveDayWeather.css';\r\n\r\nimport DayCard from '../DayCard/DayCard'\r\n\r\nclass FiveDayWeather extends React.Component {\r\n    formatDayCards = () => {\r\n        return this.props.days.map((day, index) => \r\n            <DayCard day={day} key={index} />\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className='five-day'>\r\n                <div className='wrapper'>\r\n                    <ul className='five-day__list'>\r\n                        {this.formatDayCards()}\r\n                    </ul>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FiveDayWeather;\r\n","import React from 'react';\r\n\r\nimport DayWeather from './components/DayWeather/DayWeather'\r\nimport FiveDayWeather from './components/FiveDayWeather/FiveDayWeather'\r\n\r\nconst openWeatherApiKey = 'c792484ade42380886f51003cfcaf04d';\r\n// const openWeatherApiKey = '174b98cc20c17624f93c9b67fc010d1f';\r\nconst weatherApiLinkDay = `https://api.openweathermap.org/data/2.5/weather?q=${'Kharkiv,ua'}&lang=ru&units=metric&mode=json&appid=${openWeatherApiKey}`;\r\nconst weatherApiLinkFiveDay = `https://api.openweathermap.org/data/2.5/forecast?q=${'Kharkiv,ua'}&lang=ru&units=metric&mode=json&appid=${openWeatherApiKey}`;\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    city: undefined,\r\n    temp: undefined,\r\n    summary: undefined,\r\n    apparent: undefined,\r\n    wind: undefined,\r\n    humidity: undefined,\r\n    day: undefined,\r\n    days: []\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const responseDay= await fetch(weatherApiLinkDay);\r\n    const dataDay = await responseDay.json();\r\n    console.log(dataDay);\r\n\r\n    this.setState({\r\n      city: dataDay.name,\r\n      temp: Math.round(dataDay.main.temp),\r\n      icon: dataDay.weather[0].icon,\r\n      summary: dataDay.weather[0].description,\r\n      apparent: dataDay.main.feels_like,\r\n      wind: dataDay.wind.speed,\r\n      humidity: dataDay.main.humidity,\r\n      day: dataDay.dt,\r\n    });\r\n\r\n    const responseFiveDay= await fetch(weatherApiLinkFiveDay);\r\n    const dataFiveDay = await responseFiveDay.json();\r\n    const daytimeTemperatures = dataFiveDay.list.filter(reading => reading.dt_txt.includes(\"12:00:00\"));\r\n    console.log(daytimeTemperatures);\r\n\r\n    this.setState({\r\n      days: daytimeTemperatures\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <DayWeather \r\n          city={this.state.city}\r\n          temp={this.state.temp}\r\n          icon={this.state.icon}\r\n          summary={this.state.summary}\r\n          apparent={this.state.apparent}\r\n          wind={this.state.wind}\r\n          humidity={this.state.humidity}\r\n          day={this.state.day}\r\n        />\r\n        <FiveDayWeather \r\n          days={this.state.days}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}